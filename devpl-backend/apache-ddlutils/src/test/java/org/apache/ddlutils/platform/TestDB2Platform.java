package org.apache.ddlutils.platform;


import org.apache.ddlutils.TestPlatformBase;

/**
 * Tests the DB2 platform.
 */
public class TestDB2Platform extends TestPlatformBase {

    @Override
    protected String getDatabaseName() {
        return BuiltinDatabaseType.DB2.getName();
    }

    /**
     * Tests the column types.
     */
    public void testColumnTypes() throws Exception {
        assertEqualsIgnoringWhitespaces("DROP TABLE \"coltype\";\n" + "CREATE TABLE \"coltype\"\n" + "(\n" + "    \"COL_ARRAY\"         BLOB,\n" + "    \"COL_BIGINT\"        BIGINT,\n" + "    \"COL_BINARY\"        CHAR(254) FOR BIT DATA,\n" + "    \"COL_BIT\"           SMALLINT,\n" + "    \"COL_BLOB\"          BLOB,\n" + "    \"COL_BOOLEAN\"       SMALLINT,\n" + "    \"COL_CHAR\"          CHAR(15),\n" + "    \"COL_CLOB\"          CLOB,\n" + "    \"COL_DATALINK\"      DATALINK,\n" + "    \"COL_DATE\"          DATE,\n" + "    \"COL_DECIMAL\"       DECIMAL(15,3),\n" + "    \"COL_DECIM_NOSCALE\" DECIMAL(15,0),\n" +       // only 18 characters allowed for identifiers
                                        "    \"COL_DISTINCT\"      DISTINCT,\n" + "    \"COL_DOUBLE\"        DOUBLE,\n" + "    \"COL_FLOAT\"         DOUBLE,\n" + "    \"COL_INTEGER\"       INTEGER,\n" + "    \"COL_JAVA_OBJECT\"   BLOB,\n" + "    \"COL_LONGVARBINARY\" LONG VARCHAR FOR BIT DATA,\n" + "    \"COL_LONGVARCHAR\"   LONG VARCHAR,\n" + "    \"COL_NULL\"          LONG VARCHAR FOR BIT DATA,\n" + "    \"COL_NUMERIC\"       DECIMAL(15,0),\n" + "    \"COL_OTHER\"         BLOB,\n" + "    \"COL_REAL\"          REAL,\n" + "    \"COL_REF\"           REF,\n" + "    \"COL_SMALLINT\"      SMALLINT,\n" + "    \"COL_STRUCT\"        BLOB,\n" + "    \"COL_TIME\"          TIME,\n" + "    \"COL_TIMESTAMP\"     TIMESTAMP,\n" + "    \"COL_TINYINT\"       SMALLINT,\n" + "    \"COL_VARBINARY\"     VARCHAR(15) FOR BIT DATA,\n" + "    \"COL_VARCHAR\"       VARCHAR(15)\n" + ");\n", getColumnTestDatabaseCreationSql());
    }


    /**
     * Tests the column constraints.
     */
    public void testColumnConstraints() throws Exception {
        assertEqualsIgnoringWhitespaces("DROP TABLE \"constraints\";\n" + "CREATE TABLE \"constraints\"\n" + "(\n" + "    \"COL_PK\"            VARCHAR(32),\n" + "    \"COL_PK_AUTO_INCR\"  INTEGER GENERATED BY DEFAULT AS IDENTITY,\n" + "    \"COL_NOT_NULL\"      CHAR(100) FOR BIT DATA NOT NULL,\n" + "    \"COL_NOT_N_DEFAULT\" DOUBLE DEFAULT -2.0 NOT NULL,\n" +   // only 18 characters allowed for identifiers
                                        "    \"COL_DEFAULT\"       CHAR(4) DEFAULT 'test',\n" + "    \"COL_AUTO_INCR\"     BIGINT GENERATED BY DEFAULT AS IDENTITY,\n" + "    PRIMARY KEY (\"COL_PK\", \"COL_PK_AUTO_INCR\")\n" + ");\n", getConstraintTestDatabaseCreationSql());
    }


    /**
     * Tests the table constraints.
     */
    public void testTableConstraints() throws Exception {
        assertEqualsIgnoringWhitespaces("""
            ALTER TABLE "table3" DROP CONSTRAINT "testfk";
            ALTER TABLE "table2" DROP CONSTRAINT "table2_FK_2_table1";
            DROP TABLE "table3";
            DROP TABLE "table2";
            DROP TABLE "table1";
            CREATE TABLE "table1"
            (
                "COL_PK_1"    VARCHAR(32) NOT NULL,
                "COL_PK_2"    INTEGER,
                "COL_INDEX_1" CHAR(100) FOR BIT DATA NOT NULL,
                "COL_INDEX_2" DOUBLE NOT NULL,
                "COL_INDEX_3" CHAR(4),
                PRIMARY KEY ("COL_PK_1", "COL_PK_2")
            );
            CREATE INDEX "testindex1" ON "table1" ("COL_INDEX_2");
            CREATE UNIQUE INDEX "testindex2" ON "table1" ("COL_INDEX_3", "COL_INDEX_1");
            CREATE TABLE "table2"
            (
                "COL_PK"   INTEGER,
                "COL_FK_1" INTEGER,
                "COL_FK_2" VARCHAR(32) NOT NULL,
                PRIMARY KEY ("COL_PK")
            );
            CREATE TABLE "table3"
            (
                "COL_PK" VARCHAR(16),
                "COL_FK" INTEGER NOT NULL,
                PRIMARY KEY ("COL_PK")
            );
            ALTER TABLE "table2" ADD CONSTRAINT "table2_FK_2_table1" FOREIGN KEY ("COL_FK_1", "COL_FK_2") REFERENCES "table1" ("COL_PK_2", "COL_PK_1");
            ALTER TABLE "table3" ADD CONSTRAINT "testfk" FOREIGN KEY ("COL_FK") REFERENCES "table2" ("COL_PK");
            """, getTableConstraintTestDatabaseCreationSql());
    }

    /**
     * Tests the proper escaping of character sequences where Db2 requires it.
     */
    public void testCharacterEscaping() throws Exception {
        assertEqualsIgnoringWhitespaces("""
            DROP TABLE "escapedcharacters";
            CREATE TABLE "escapedcharacters"
            (
                "COL_PK"   INTEGER,
                "COL_TEXT" VARCHAR(128) DEFAULT '''',
                PRIMARY KEY ("COL_PK")
            );
            """, getCharEscapingTestDatabaseCreationSql());
    }
}
