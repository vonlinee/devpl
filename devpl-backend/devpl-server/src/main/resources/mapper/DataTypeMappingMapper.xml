<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.devpl.backend.dao.DataTypeMappingMapper">

    <select id="listDataTypeMappingItems" resultType="io.devpl.backend.domain.vo.DataTypeMappingListVO">
        SELECT A.type_id,
        B.type_name,
        B.type_group_id,
        C.type_name AS another_type_name,
        C.type_group_id AS another_group_id
        FROM data_type_mapping A
        LEFT JOIN (SELECT data_type_item.*, data_type_group.group_id, data_type_group.group_name
        FROM data_type_item
        LEFT JOIN data_type_group
        ON data_type_item.type_group_id = data_type_group.group_id) B
        ON A.type_id = B.id
        LEFT JOIN
        (SELECT data_type_item.*, data_type_group.group_id, data_type_group.group_name
        FROM data_type_item
        LEFT JOIN data_type_group
        ON data_type_item.type_group_id = data_type_group.group_id) C
        ON A.another_type_id = C.id
        <where>
            <if test="typeId != null">
                AND A.type_id = #{typeId}
            </if>
        </where>
    </select>

    <select id="listAllMappableDataTypes" resultType="io.devpl.backend.domain.vo.DataTypeMappingVO">
        SELECT *
        FROM data_type_item
        WHERE id != #{typeId}
    </select>

    <select id="listAllUnMappedDataTypes" resultType="io.devpl.backend.domain.vo.DataTypeMappingVO">
        SELECT A.id AS type_id, dtg.group_id AS type_group_id, A.type_key, A.type_name, false as mapped
        FROM data_type_item A
                 LEFT JOIN (SELECT DISTINCT type_id FROM data_type_mapping) B ON A.id = B.type_id
                 LEFT JOIN data_type_group dtg on A.type_group_id = dtg.group_id
        WHERE type_id IS NULL
    </select>
</mapper>
